/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h> 

#define DEF 0
#define SYM  1
#define NAV  2
#define FUN 3
#include "combos.dtsi"

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {
    behaviors {
        am: alpha_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        as: alpha_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Easy alt-tab with alt+backspace thumb using mod-morphs
        bstab: backspace_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_TAB";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp TAB>;
            mods = <MOD_LALT>;
        };
        lt_bspc: layer_tap_backspace_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            bindings = <&mo>, <&bstab>;
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define FUN layer as tri-state
        func_tristate {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    macros {
        ZMK_MACRO(inv_qm,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>
                , <&macro_release &kp LALT>;
        )
    };

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | ADJ/ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | Ü |
// | CTL/TB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  Ö  | Ä    |
// | SHFT    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -  | SHFT |
//                    | ALT | GUI | LWR/SPC  |   | RSE/ENT | BKSP  | DEL |
                        label = "DEF";
                        bindings = <
   &lt ADJUST ESC    &kp Q &kp W &kp E &kp R &kp T      &kp Y &kp U  &kp I  &kp O   &kp P    &kp LBKT
   &mt LCTRL TAB   &am LCTRL A   &am LGUI S    &am LALT D    &as LSHFT F   &kp G  &kp H  &as RSHFT J   &am RALT K    &am RGUI L   &am RCTRL SEMI &kp SQT
   &kp LSHFT         &kp Z &kp X &kp C &kp V &kp B      &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHIFT 
                 &kp LALT &kp LGUI  &lt LOWER SPACE       &lt RAISE RET &kp BSPC &kp DEL
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// | ADJ/ESC |  !  |  "  |  §  |  $  |  %  |   |  & |  /  |  (  |  )  |  =  |   ß   |
// |         |     |     |     |     |     |   |  * |  #  |  [  |  ]   |  <  |  >   |
// | SHFT    |     |     |     |     |     |   | '  |  `  |  {  |  }   |  +  | SHFT |
//                    | ALT | GUI | LWR/SPC  |   | RSE/ENT | BKSP  | DEL |
                    label = "SYM";
                    bindings = <
   &lt ADJUST ESC  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp LS(N8) &kp LPAR &kp RPAR  &kp MINUS 
   &trans &trans &trans &trans &trans &trans                     &kp KP_MULTIPLY &kp NON_US_HASH &kp LA(N5) &kp LA(N6)  &kp GRAVE &kp TILDE
   &kp LSHIFT &trans &trans &trans &trans &trans                 &kp PIPE &kp PLUS &kp LA(N8) &kp LA(N9) &kp RBKT &kp RSHIFT
                 &kp LALT &kp LGUI  &lt LOWER SPACE       &lt RAISE RET &kp BSPC &kp DEL
                       >;  
                };

                navigation_layer {
// -----------------------------------------------------------------------------------------
// | ADJ/ESC |  1  |  2  |  3  |  4  |  5  |   |  6   |  7  | 8   |  9  |  0  |      |
// |         | F1  | F2  | F3  | F4  | F5  |   | LFT  | DWN | UP  | RGT |     |      |
// | SHFT    | F6  | F7  | F8  | F9  | F10 |   | home | PDN | PUP | END |     |      |
//                    | ALT | GUI | LWR/SPC  |   | RSE/ENT | BKSP | DEL |
                    label = "NAV";
                    bindings = <
   &lt ADJUST  ESC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans
   &trans &kp F1 &kp F2 &kp F3 &kp F4 &kp F5         &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10    &kp HOME &kp PG_DN &kp PG_UP &kp END &trans &kp RSHIFT
                 &kp LALT &kp LGUI  &lt LOWER SPACE       &lt RAISE RET &kp BSPC &kp DEL
                        >;
                };

                function_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |      |     | PREV| PLAY| NEXT|  MUTE | VOLDN | VOLUP| 
// | BT1  | BT2 | BT3 | BT4 | BT5 | BTCLR|     |     |     |     |       | BRID  | BRIU |
// | CAPS |     |     |     |      |     |     |     |     |     |      |
//                | ALT | GUI | LWR/SPC  |   | RSE/ENT | BKSP  | DEL |
                    label = "FUN";
                    bindings = <
      &trans &trans &trans &trans &trans &trans                                         &kp C_PREV &kp C_PP &kp C_NEXT   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  
      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR       &trans &trans &trans &trans &kp C_BRI_DN  &kp C_BRI_UP
      &kp CAPS &trans  &trans &trans &trans &trans                &trans &trans &trans &trans &trans &trans
                                        &trans &trans &trans                 &trans &trans &trans 
                        >;
                };
        };
};
